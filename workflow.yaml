main:
  steps:
  - before:
      assign:
      - project: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
      - region: ${sys.get_env("GOOGLE_CLOUD_LOCATION")}
  # millionCelebration
  - createMillionCelebrationCallback:
      call: events.create_callback_endpoint
      args:
        http_callback_method: "GET"
      result: millionCelebrationCallbackDetails
  - millionCelebration:
      call: http.post
      args:
        url: ${"https://workflowexecutions.googleapis.com/v1/projects/" + project + "/locations/" + region + "/workflows/million-celebration/executions"}
        auth:
          type: OAuth2
        body:
          argument: ${json.encode_to_string(millionCelebrationCallbackDetails)}
  # waitForAllWorkFlows
  - assignCallbacks:
      assign:
      - callbackDetails:
        - ${millionCelebrationCallbackDetails}
      - waitUntil: ${int(sys.now()) + 60 * 60 * 12}
  - waitForAllWorkflows:
      for:
        value: c
        in: ${callbackDetails}
        steps:
        - calcTimeout:
            assign:
            - timeoutSeconds: ${waitUntil - int(sys.now())}
        - waitForWorkflow:
            try:
              call: events.await_callback
              args:
                callback: ${c}
                timeout: ${timeoutSeconds}
            except:
              as: e
              steps:
              - reportError:
                  call: reportErrorSubworkflow
                  args:
                    msg: ${json.encode_to_string(e)}
                    project: ${project}
              - throwError:
                  raise: ${e}
      next: end

reportErrorSubworkflow:
  params: [project, msg: "Something went wrong."]
  steps:
  - fetchToken:
      call: googleapis.secretmanager.v1.projects.secrets.versions.accessString
      args:
        secret_id: LINE_TOKEN_SANDBOX
        project_id: ${project}
      result: token
  - sendMessage:
      call: http.post
      args:
        url: https://notify-api.line.me/api/notify
        body:
          message: ${msg}
        headers:
          Content-Type: 'application/x-www-form-urlencoded'
          Authorization: '${"Bearer " + token}'

